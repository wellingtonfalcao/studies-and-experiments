Capítulo 1



Uma filosofia pragmática




Este livro é sobre você.

Não se engane, é sua carreira e, mais importante, o Tópico 1, é a sua vida. Você possui isso. Você está aqui porque sabe que pode se tornar um desenvolvedor melhor e ajudar os outros a se tornarem melhores também. Você pode se tornar um programador pragmático.

O que distingue programadores pragmáticos? Achamos que é uma atitude, um estilo, uma filosofia de abordar problemas e suas soluções. Eles pensam além do problema imediato, colocando -o em seu contexto maior e buscando o quadro geral. Afinal, sem esse contexto maior, como você pode ser pragmático? Como você pode tomar compromissos inteligentes e decisões informadas?

Outra chave para o sucesso deles é que os programadores pragmáticos assumem a responsabilidade por tudo o que fazem, que discutimos no tópico 2, o gato comeu meu código -fonte. Sendo responsáveis, os programadores pragmáticos não se sentam à toa e assistirão seus projetos desmoronarem por negligência. No tópico 3, entropia de software, dizemos como manter seus projetos intocados.

A maioria das pessoas acha as mudanças difíceis, às vezes por boas razões, às vezes por causa da antiga inércia. No tópico 4, sopa de pedra e sapos cozidos, analisamos uma estratégia para instigar mudanças e (no interesse do equilíbrio) apresentamos a história de advertência de um anfíbio que ignorou os perigos da mudança gradual.

Um dos benefícios de entender o contexto em que você trabalha é que fica mais fácil saber o quão bom seu software deve ser. Às vezes, a quase perfeição é a única opção, mas muitas vezes há compensações envolvidas. Exploramos isso no tópico 5, o software bom o suficiente.

Obviamente, você precisa ter uma ampla base de conhecimento e experiência para fazer tudo isso. O aprendizado é um processo contínuo e contínuo. No tópico 6, seu portfólio de conhecimento, discutimos algumas estratégias para manter o momento.

Finalmente, nenhum de nós trabalha no vácuo. Todos passamos uma grande quantidade de tempo interagindo com os outros. Tópico 7, Comunique! Lista maneiras de fazer isso melhor.

A programação pragmática deriva de uma filosofia do pensamento pragmático. Este capítulo define a base para essa filosofia.





Tópico 1

É a sua vida




Não estou neste mundo para cumprir suas expectativas e você não está neste mundo para cumprir o meu.



Bruce Lee



É a sua vida. Você possui isso. Você opera. Você cria.

Muitos desenvolvedores com quem conversamos estão frustrados. Suas preocupações são variadas. Alguns sentem que estão estagnando em seu trabalho, outros pela qual a tecnologia passou por eles. As pessoas sentem que estão sendo apreciadas ou mal pagas, ou que suas equipes são tóxicas. Talvez eles queiram se mudar para a Ásia, ou Europa, ou trabalhar em casa.

E a resposta que damos é sempre a mesma.

"Por que você não pode mudar isso?"

O desenvolvimento de software deve aparecer próximo ao topo de qualquer lista de carreiras onde você tenha controle. Nossas habilidades são procuradas, nosso conhecimento cruza os limites geográficos, podemos trabalhar remotamente. Nós somos bem pagos. Nós realmente podemos fazer praticamente tudo o que queremos.

Mas, por algum motivo, os desenvolvedores parecem resistir à mudança. Eles se abalam e esperam que as coisas melhorem. Eles olham, passivamente, à medida que suas habilidades se datam e reclamam que suas empresas não as treinam. Eles olham para os anúncios para locais exóticos no ônibus e depois entram na chuva arrepiante e entram no trabalho.

Então, aqui está a dica mais importante do livro.

Dica 3 você tem agência



Seu ambiente de trabalho é péssimo? O seu trabalho é chato? Tente consertar. Mas não tente para sempre. Como Martin Fowler diz: “Você pode mudar sua organização ou mudar sua organização.” [3]

Se a tecnologia parece estar passando por você, reserve um tempo (no seu próprio tempo) para estudar coisas novas que parecem interessantes. Você está investindo em si mesmo, então fazê-lo enquanto estiver próprio é razoável.

Quer trabalhar remotamente? Você perguntou? Se eles disserem não, encontre alguém que diga que sim.

Esta indústria oferece um conjunto notável de oportunidades. Seja proativo e leve -os.





Seções relacionadas incluem


Tópico 4, sopa de pedra e sapos cozidos

Tópico 6, seu portfólio de conhecimento





Tópico 2

O gato comeu meu código -fonte




	O maior de todas as fraquezas é o medo de parecer fraco.



J.B. Bossuet, Política de Holy Writ, 1709



Uma das pedras angulares da filosofia pragmática é a idéia de assumir a responsabilidade por você e suas ações em termos de avanço na carreira, seu aprendizado e educação, seu projeto e seu trabalho diário. Programadores pragmáticos se encarregam de sua própria carreira e não são
com medo de admitir ignorância ou erro. Não é o aspecto mais agradável da programação, com certeza, mas acontecerá - mesmo sobre os melhores projetos. Apesar dos testes completos, boa documentação e automação sólida, as coisas dão errado. As entregas estão atrasadas. Problemas técnicos imprevistos surgem.

Essas coisas acontecem, e tentamos lidar com elas o mais profissionalmente possível. Isso significa ser honesto e direto. Podemos nos orgulhar de nossas habilidades, mas devemos adquirir nossas deficiências - nossa ignorância e nossos erros.





Team confiança


Acima de tudo, sua equipe precisa confiar e confiar em você - e você precisa se sentir confortável confiando em cada um deles também. A confiança em uma equipe é absolutamente essencial para a criatividade e colaboração de acordo com a literatura de pesquisa. [4] Em um ambiente saudável baseado em confiança, você pode dizer com segurança, apresentar suas idéias e confiar nos membros da sua equipe que podem, por sua vez, confiar em você. Sem confiança, bem ...

Imagine uma equipe de alta tecnologia e Stealth Ninja se infiltrando no covil do vilão. Após meses de planejamento e execução delicada, você o fez no local. Agora é sua vez de montar a grade de orientação a laser: "Desculpe, pessoal, eu não tenho o laser. O gato estava brincando com o ponto vermelho e eu o deixei em casa".

Esse tipo de quebra de confiança pode ser difícil de reparar.





Assumir a responsabilidade


Responsabilidade é algo com o qual você concorda ativamente. Você se compromete a garantir que algo seja feito corretamente, mas não tem necessariamente controle direto sobre todos os aspectos. Além de fazer o seu melhor pessoal, você deve analisar a situação quanto aos riscos que estão além do seu controle. Você tem o direito de não assumir a responsabilidade por uma situação impossível, ou uma na qual os riscos são muito grandes, ou as implicações éticas muito esboçadas. Você precisará fazer a chamada com base em seus próprios valores e julgamento.

Quando você aceita a responsabilidade por um resultado, deve ser responsabilizado por isso. Quando você cometer um erro (como todos nós) ou um erro de julgamento, admiti -lo honestamente e tente oferecer opções.

Não culpe alguém ou outra coisa ou faça uma desculpa. Não culpe todos os problemas a um fornecedor, uma linguagem de programação, gerenciamento ou seus colegas de trabalho. Todo e tudo isso pode desempenhar um papel, mas cabe a você fornecer soluções, não desculpas.

Se houvesse o risco de que o fornecedor não aparecesse para você, você deveria ter um plano de contingência. Se o seu armazenamento em massa derreter - fazendo todo o seu código -fonte com ele - e você não tem um backup, é sua culpa. Dizer ao seu chefe que "o gato comeu meu código -fonte" simplesmente não o corte.

Dica 4 Ofereça opções, não faça desculpas esfarrapadas



Antes de você se aproximar de alguém para dizer a eles por que algo não pode ser feito, está atrasado ou está quebrado, pare e ouça a si mesmo. Fale com o pato de borracha no seu monitor ou no gato. Sua desculpa soa razoável ou estúpida? Como vai parecer seu chefe?

Corra pela conversa em sua mente. O que a outra pessoa provavelmente diz? Eles vão perguntar: "Você já tentou isso ..." ou "Você não considerou isso?" Como você vai responder? Antes de ir e contar as más notícias, há mais alguma coisa que você possa tentar? Às vezes, você sabe o que eles vão dizer, então salve o problema.

Em vez de desculpas, forneça opções. Não diga que não pode ser feito; Explique o que pode ser feito para salvar a situação. O código precisa ser excluído? Diga a eles e explique o valor da refatoração (consulte o tópico 40, refatoração).

Você precisa gastar prototipagem de tempo para determinar a melhor maneira de prosseguir (consulte o tópico 13, protótipos e notas post-it)? Você precisa introduzir melhores testes (consulte o tópico 41, teste para codificar e testes cruéis e contínuos) ou automação para impedir que isso aconteça novamente?

Talvez você precise de recursos adicionais para concluir esta tarefa. Ou talvez você precise passar mais tempo com os usuários? Ou talvez seja apenas você: você precisa aprender alguma técnica ou tecnologia com maior profundidade? Um livro ou um curso ajudaria? Não tenha medo de perguntar ou admitir que você precisa de ajuda.

Tente eliminar as desculpas esfarrapadas antes de expressá -las em voz alta. Se precisar, diga ao seu gato primeiro. Afinal, se pequenos telhas vão assumir a culpa….





Seções relacionadas incluem


Tópico 49, equipes pragmáticas





Desafios


Como você reage quando alguém - como um caixa, um mecânico de automóveis ou um funcionário - compara a você com uma desculpa manca? O que você acha deles e sua empresa como resultado?



Quando você se encontra
dizendo: "Eu não sei", siga -o com " - mas eu vou descobrir". É uma ótima maneira de admitir o que você não sabe, mas assume a responsabilidade como um profissional.





Tópico 3

Entropia de software




Embora o desenvolvimento de software esteja imune a quase todas as leis físicas, o aumento inexorável da entropia nos atinge com força. A entropia é um termo da física que se refere à quantidade de "desordem" em um sistema. Infelizmente, as leis da termodinâmica garantem que a entropia no universo tende ao máximo. Quando o distúrbio aumenta no software, chamamos de "podridão do software". Algumas pessoas podem chamá -lo pelo termo mais otimista de "dívida técnica", com a noção implícita de que pagará de volta algum dia. Eles provavelmente não.

Seja qual for o nome, porém, a dívida e a podridão podem se espalhar incontrolavelmente.

Existem muitos fatores que podem contribuir para a podridão do software. O mais importante parece ser a psicologia ou cultura, trabalhando em um projeto. Mesmo se você é uma equipe de uma, a psicologia do seu projeto pode ser uma coisa muito delicada. Apesar dos melhores planos e das melhores pessoas, um projeto ainda pode experimentar ruína e deterioração durante sua vida. No entanto, existem outros projetos que, apesar das enormes dificuldades e contratempos constantes, combatem com sucesso a tendência da natureza em relação à desordem e conseguem sair muito bem.

O que faz a diferença?

Nas cidades internas, alguns edifícios são lindos e limpos, enquanto outros estão apodrecendo. Por que? Pesquisadores do campo do crime e decaimento urbano descobriram um mecanismo fascinante de gatilho, que rapidamente transforma um edifício limpo, intacto e habitado em um abandono e abandonado. [5]

Uma janela quebrada.

Uma janela quebrada, deixada não reparada por qualquer período substancial, instila nos habitantes do edifício uma sensação de abandono - um sentido de que os poderes que não se importam com o prédio. Então outra janela é quebrada. As pessoas começam a lixo. Graffiti aparece. Danos estruturais graves começam. Em um período relativamente curto, o edifício fica danificado além do desejo do proprietário de consertá -lo, e o sentimento de abandono se torna realidade.

Por que isso faria a diferença? Os psicólogos fizeram estudos [6] que mostram que a desesperança pode ser contagiosa. Pense no vírus da gripe de perto. Ignorar uma situação claramente quebrada reforça as idéias que talvez nada possa ser consertado, que ninguém se importa, tudo está condenado; Todos os pensamentos negativos que podem se espalhar entre os membros da equipe, criando uma espiral cruel.

Dica 5 Não mora com janelas quebradas



Não deixe as "janelas quebradas" (designs ruins, decisões erradas ou código ruim) não reparados. Corrija cada um assim que for descoberto. Se não houver tempo suficiente para corrigi -lo corretamente e depois embarcar.

Vimos sistemas limpos e funcionais se deteriorarem rapidamente quando o Windows começar a quebrar. Existem outros fatores que podem contribuir para a podridão do software, e abordaremos alguns deles em outros lugares, mas negligenciaremos acelerar a podridão mais rapidamente do que qualquer outro fator.

Você pode estar pensando que ninguém tem tempo para limpar todo o vidro quebrado de um projeto. Nesse caso, é melhor você planejar uma lixeira ou se mudar para outro bairro. Não deixe a entropia vencer.





Primeiro, não faça mal


Andy já tinha um conhecido que era obscenamente rico. Sua casa era imaculada, carregada de antiguidades inestimáveis, objetes d'Art e assim por diante. Um dia, uma tapeçaria que estava pendurada um pouco perto de uma lareira pega fogo. O corpo de bombeiros correu para salvar o dia - e sua casa. Mas antes de arrastarem suas grandes mangueiras sujas para a casa, eles pararam - com o fogo furioso - para rolar um tapete entre a porta da frente e a fonte do fogo.

Eles não queriam bagunçar o tapete.

Agora isso parece muito extremo. Certamente a primeira prioridade do corpo de bombeiros é apagar o incêndio, os danos colaterais são condenados. Mas eles claramente avaliaram a situação, estavam confiantes em sua capacidade de gerenciar o incêndio e tomaram cuidado para não causar danos desnecessários à propriedade. É assim que deve ser com o software: não cause danos colaterais apenas porque há algum tipo de crise. Uma janela quebrada é uma demais.

Uma janela quebrada - uma peça de código mal projetada, uma má decisão de gestão com a qual a equipe deve viver para o
A duração do projeto - é tudo o que é necessário para iniciar o declínio. Se você estiver trabalhando em um projeto com algumas janelas quebradas, é muito fácil entrar na mentalidade de "todo o restante deste código é uma porcaria, vou seguir o exemplo". Não importa se o projeto foi bom até este ponto. No experimento original, levando à "teoria da janela quebrada", um carro abandonado ficou por uma semana intocada. Mas uma vez que uma única janela foi quebrada, o carro foi despojado e virado de cabeça para baixo em poucas horas.

Da mesma forma, se você se encontrar em um projeto em que o código é intistinamente bonito - escrito, bem projetado e elegante - você provavelmente tomará um cuidado especial para não bagunçar, assim como os bombeiros. Mesmo se houver um incêndio (prazo, data de lançamento, demonstração da feira, etc.), você não quer ser o primeiro a fazer uma bagunça e causar danos adicionais.

Apenas diga a si mesmo: "Sem janelas quebradas".





Seções relacionadas incluem


Tópico 10, Ortogonalidade

Tópico 40, refatoração

Tópico 44, nomeando coisas





Desafios


Ajude a fortalecer sua equipe pesquisando o bairro do seu projeto. Escolha duas ou três janelas quebradas e discuta com seus colegas quais são os problemas e o que poderia ser feito para corrigi -los.



Você pode dizer quando uma janela é quebrada? Qual é a sua reação? Se foi o resultado da decisão de outra pessoa ou de um decreto da gerência, o que você pode fazer sobre isso?





Tópico 4

Sopa de pedra e sapos cozidos




Os três soldados que voltam para casa da guerra estavam com fome. Quando viram a vila à frente, seus espíritos se levantaram - eles tinham certeza de que os moradores lhes dariam uma refeição. Mas quando chegaram lá, encontraram as portas trancadas e as janelas fechadas. Depois de muitos anos de guerra, os moradores estavam com falta de comida e acumulavam o que tinham.

Sem se deixar abater, os soldados ferveram um pote de água e cuidadosamente colocaram três pedras nela. Os aldeões impressionados saíram para assistir.

"Esta é a sopa de pedra", explicou os soldados. "Isso é tudo que você coloca nele?" perguntou aos moradores. "Absolutamente - embora alguns digam que tem um gosto ainda melhor com algumas cenouras ..." Um aldeão fugiu, retornando em pouco tempo com uma cesta de cenouras de seu tesouro.

Alguns minutos depois, os moradores perguntaram novamente: "É isso?"

"Bem", disse os soldados, "duas batatas dão corpo". Off correu outro aldeão.

Durante a hora seguinte, os soldados listaram mais ingredientes que melhorariam a sopa: carne, alho -poró, sal e ervas. Cada vez que um aldeão diferente corria para invadir suas lojas pessoais.

Eventualmente, eles haviam produzido um grande pote de sopa fumegante. Os soldados removeram as pedras e se sentaram com toda a vila para aproveitar a primeira refeição quadrada que qualquer um deles havia comido em meses.

Há alguns moral na história da sopa de pedra. Os moradores são enganados pelos soldados, que usam a curiosidade dos moradores para obter comida deles. Mais importante, porém, os soldados atuam como um catalisador, reunindo a vila para que possam produzir em conjunto algo que não poderiam ter feito por si mesmos - um resultado sinérgico. Eventualmente, todos vencem.

De vez em quando, você pode querer imitar os soldados.

Você pode estar em uma situação em que sabe exatamente o que precisa fazer e como fazê -lo. Todo o sistema aparece diante de seus olhos - você sabe que está certo. Mas peça permissão para enfrentar a coisa toda e você será recebido com atrasos e olhares em branco. As pessoas formarão comitês, os orçamentos precisarão de aprovação e as coisas ficarão complicadas. Todos vão guardar seus próprios recursos. Às vezes, isso é chamado de "fadiga inicial".

É hora de tirar as pedras. Descubra o que você pode pedir razoavelmente. Desenvolva bem. Depois de conseguir, mostre às pessoas e deixe -as se maravilhar. Então diga "É claro que seria melhor se acrescentarmos ..." Finja que não é importante. Sente -se e espere que eles comecem a pedir que você adicione a funcionalidade que você queria originalmente. As pessoas acham mais fácil participar de um sucesso contínuo. Mostre a eles um vislumbre do futuro e você o levará a se unir. [7]

Dica 6 seja um catalisador para a mudança





O lado dos moradores


Por outro lado, a história da sopa de pedra também é sobre engano gentil e gradual. Trata -se de focar com muita força. Os moradores pensam nas pedras e esquecem o resto do mundo. Todos nós caímos nisso, todos os dias. As coisas simplesmente se arrastam para nós.

Todos nós vimos os sintomas. Projetos lenta e inexoravelmente ficam totalmente fora de controle. A maioria dos desastres de software começa muito pequena para perceber, e a maioria
Os excedentes do projeto acontecem um dia de cada vez. Os sistemas flutuam de seus recursos de especificações por recurso, enquanto o patch após o patch é adicionado a um pedaço de código até que não haja nada da esquerda original. Muitas vezes, é o acúmulo de pequenas coisas que quebram o moral e as equipes.

Dica 7 Lembre -se do quadro geral



Nós nunca tentamos isso - o melhor. Mas "eles" dizem que, se você pegar um sapo e soltá -lo em água fervente, ele voltará diretamente. No entanto, se você colocar o sapo em uma panela de água fria, aqueça gradualmente, o sapo não notará o lento aumento de temperatura e permanecerá parado até cozinhar.

Observe que o problema do sapo é diferente do problema do Windows quebrado discutido no tópico 3, entropia de software. Na teoria da janela quebrada, as pessoas perdem a vontade de combater a entropia porque percebem que ninguém mais se importa. O sapo simplesmente não percebe a mudança.

Não seja como o lendário sapo. Fique de olho no quadro geral. Revise constantemente o que está acontecendo ao seu redor, não apenas o que você está fazendo pessoalmente.





Seções relacionadas incluem


Tópico 1, é a sua vida

Tópico 38, Programação por coincidência





Desafios


Ao revisar um rascunho da primeira edição, John Lakos levantou a seguinte edição: Os soldados enganam progressivamente os moradores, mas a mudança que catalisam faz com que todos eles sejam bem. No entanto, ao enganar progressivamente o sapo, você está causando danos. Você pode determinar se está fazendo sopa de pedra ou sopa de sapo quando tenta catalisar a mudança? A decisão é subjetiva ou objetiva?



Rápido, sem olhar, quantas luzes estão no teto acima de você? Quantas saídas na sala? Quantas pessoas? Existe algo fora de contexto, algo que parece que não pertence? Este é um exercício de consciência situacional, uma técnica praticada por pessoas que variam de escoteiras de meninos e garotas a focas da Marinha. Entre no hábito de realmente olhar e perceber o ambiente. Então faça o mesmo com o seu projeto.





Tópico 5

Software bom o suficiente




	Esforçando -se para melhor, muitas vezes marcarmos o que está bem.



Shakespeare, rei Lear 1.4



Há uma piada antiga (ish) sobre uma empresa que faz um pedido para 100.000 ICs com um fabricante japonês. Parte da especificação foi a taxa de defeito: um chip em 10.000. Algumas semanas depois, chegou o pedido: uma caixa grande contendo milhares de ICs e uma pequena contendo apenas dez. Anexado à caixa pequena, havia um rótulo que dizia: "Estes são os defeituosos".

Se ao menos tivéssemos realmente esse tipo de controle sobre a qualidade. Mas o mundo real simplesmente não nos deixa produzir muito, o que é realmente perfeito, principalmente software sem insetos. Tempo, tecnologia e temperamento conspiram contra nós.

No entanto, isso não precisa ser frustrante. Como ED Yourdon descreveu em um artigo do IEEE Software, quando o software o suficiente é o melhor [você95], você pode se disciplinar para escrever software que seja bom o suficiente-bom o suficiente para seus usuários, para futuros mantenedores, para sua própria paz de espírito. Você descobrirá que é mais produtivo e seus usuários estão mais felizes. E você pode achar que seus programas são realmente melhores para a incubação mais curta.

Antes de prosseguirmos, precisamos qualificar o que estamos prestes a dizer. A frase "boa o suficiente" não implica um código desleixado ou mal produzido. Todos os sistemas devem atender aos requisitos de seus usuários para ter sucesso e atender aos padrões básicos de desempenho, privacidade e segurança. Estamos simplesmente defendendo que os usuários tenham a oportunidade de participar do processo de decisão quando o que você produziu é bom o suficiente para suas necessidades.





Envolva seus usuários no trade-off


Normalmente, você está escrevendo software para outras pessoas. Muitas vezes você se lembra de descobrir o que eles querem. [8] Mas você já pergunta o quão bom eles querem que seu software seja? Às vezes, não haverá escolha. Se você estiver trabalhando em marcapassos, um piloto automático ou uma biblioteca de baixo nível que será amplamente disseminada, os requisitos serão mais rigorosos e suas opções mais limitadas.

No entanto, se você estiver trabalhando em um produto novinho em folha, terá restrições diferentes. O pessoal de marketing terá promessa de cumprir, os eventuais usuários finais podem ter feito planos com base em um cronograma de entrega, e sua empresa certamente terá restrições de fluxo de caixa. Seria não profissional ignorar os requisitos desses usuários simplesmente adicionar novos recursos ao programa ou aprimorar o código apenas mais uma vez. Não estamos defendendo o pânico: é igualmente pouco profissional prometer escalas de tempo impossíveis e
Corte os cantos básicos de engenharia para cumprir um prazo.

O escopo e a qualidade do sistema que você produz devem ser discutidos como parte dos requisitos desse sistema.

Dica 8 Faça de qualidade um problema de requisitos



Muitas vezes, você estará em situações em que as compensações estão envolvidas. Surpreendentemente, muitos usuários preferem usar o software com algumas arestas hoje do que esperar um ano pela versão brilhante e de sino e branquear (e na verdade eles precisarão de um ano daqui a ser completamente diferente). Muitos departamentos de TI com orçamentos apertados concordariam. O ótimo software hoje costuma ser preferível à fantasia do software perfeito amanhã. Se você der aos usuários algo para brincar cedo, o feedback deles geralmente o levará a uma solução final melhor (consulte o tópico 12, marcadores de rastreamento).





Saiba quando parar


De certa forma, a programação é como pintura. Você começa com uma tela em branco e certas matérias -primas básicas. Você usa uma combinação de ciência, arte e artesanato para determinar o que fazer com eles. Você esboça uma forma geral, pinta o ambiente subjacente e depois preenche os detalhes. Você constantemente recupera com um olhar crítico para ver o que fez. De vez em quando você joga uma tela fora e começa novamente.

Mas os artistas lhe dirão que todo o trabalho duro é arruinado se você não souber quando parar. Se você adicionar camada após a camada, detalhes sobre detalhes, a pintura se perderá na tinta.

Não estrague um programa perfeitamente bom por excesso de descrição e excesso de refinamento. Avance em frente e deixe seu código ficar por si só por um tempo. Pode não ser perfeito. Não se preocupe: nunca poderia ser perfeito. (No capítulo 7, enquanto você estiver codificando, discutiremos filosofias para o desenvolvimento de código em um mundo imperfeito.)





Seções relacionadas incluem


Tópico 45, o poço de requisitos

Tópico 46, resolvendo quebra -cabeças impossíveis





Desafios


Veja as ferramentas de software e os sistemas operacionais que você usa regularmente. Você consegue encontrar alguma evidência de que essas organizações e/ou desenvolvedores sejam software de remessa confortável que eles sabem que não são perfeitos? Como usuário, você prefere (1) esperar que eles divulgem todos os bugs, (2) tenham software complexo e aceitam alguns bugs ou (3) opte por software mais simples com menos defeitos?



Considere o efeito da modularização na entrega de software. Levará mais ou menos tempo para obter um bloco monolítico de software firmemente acoplado à qualidade necessária em comparação com um sistema projetado como módulos ou microsserviços muito pouco acoplados? Quais são as vantagens ou desvantagens de cada abordagem?



Você consegue pensar em software popular que sofre de inchaço? Ou seja, software contendo muito mais recursos do que você jamais usaria, cada recurso introduzindo mais oportunidades para bugs e vulnerabilidades de segurança e tornando os recursos que você usa mais para encontrar e gerenciar. Você corre o risco de cair nessa armadilha?





Tópico 6

Seu portfólio de conhecimento




Um investimento em conhecimento sempre paga o melhor interesse.



Benjamin Franklin



Ah, o bom e velho Ben Franklin - nunca perdido para uma homilia expressa. Por que, se poderíamos chegar cedo para a cama e cedo para subir, seríamos ótimos programadores - bem? O madrugador pode conseguir o verme, mas o que acontece com o verme inicial?

Nesse caso, porém, Ben realmente bateu na unha na cabeça. Seu conhecimento e experiência são seus ativos profissionais diários mais importantes.

Infelizmente, eles estão expirando ativos. [9] Seu conhecimento fica desatualizado à medida que novas técnicas, idiomas e ambientes são desenvolvidos. A mudança das forças do mercado pode tornar sua experiência obsoleta ou irrelevante. Dado o ritmo cada vez maior de mudança em nossa sociedade tecnológica, isso pode acontecer rapidamente.

À medida que o valor do seu conhecimento diminui, o seu valor também para sua empresa ou cliente. Queremos impedir que isso aconteça.

Sua capacidade de aprender coisas novas é o seu ativo estratégico mais importante. Mas como você aprende a aprender e como sabe o que aprender?





Seu portfólio de conhecimento


Gostamos de pensar em todos os programadores de fatos sobre a computação, os domínios de aplicativos em que trabalham e toda a sua experiência como portfólios de conhecimento. Gerenciar um portfólio de conhecimento é muito semelhante ao gerenciamento de um portfólio financeiro:

Investidores sérios investem regularmente - como um hábito.

A diversificação é a chave para o sucesso a longo prazo.

Os investidores inteligentes equilibram seus portfólios entre investimentos conservadores e de alto risco e de alta recompensa.

Os investidores tentam comprar baixo e vender alto no máximo
retornar.

Os portfólios devem ser revisados e reequilibrados periodicamente.



Para ter sucesso em sua carreira, você deve investir em seu portfólio de conhecimento usando essas mesmas diretrizes.

A boa notícia é que gerenciar esse tipo de investimento é uma habilidade como qualquer outra - pode ser aprendido. O truque é fazer isso de forma inicial e formar um hábito. Desenvolva uma rotina que você segue até que seu cérebro a internalize. Nesse ponto, você se encontrará sugando novos conhecimentos automaticamente.





Construindo seu portfólio


Invista regularmente

Assim como no investimento financeiro, você deve investir em seu portfólio de conhecimento regularmente, mesmo que seja apenas uma pequena quantia. O hábito é tão importante quanto as somas; portanto, planeje usar um tempo e local consistentes, longe das interrupções. Alguns objetivos de amostra estão listados na próxima seção.



Diversificar

Quanto mais coisas diferentes você souber, mais valioso é. Como linha de base, você precisa conhecer os meandros da tecnologia específica com a qual está trabalhando atualmente. Mas não pare por aí. A face da computação muda rapidamente - a tecnologia hoje pode estar perto de inútil (ou pelo menos não em demanda) amanhã. Quanto mais tecnologias você estiver confortável, melhor você poderá se ajustar a mudar. E não se esqueça de todas as outras habilidades que você precisa, incluindo as de áreas não técnicas.



Gerenciar riscos

A tecnologia existe ao longo de um espectro de padrões arriscados, potencialmente de alta recompensa a baixo risco e baixa recompensa. Não é uma boa ideia investir todo o seu dinheiro em ações de alto risco que podem entrar em colapso de repente, nem você deve investir tudo de forma conservadora e perder possíveis oportunidades. Não coloque todos os seus ovos técnicos em uma cesta.



Compre baixo, venda alto

Aprender uma tecnologia emergente antes de se tornar popular pode ser tão difícil quanto encontrar um estoque subvalorizado, mas o retorno pode ser igualmente gratificante. Aprender a Java quando foi introduzido e desconhecido pode ter sido arriscado na época, mas valeu a pena pelos primeiros adotantes quando se tornou um dos pilares da indústria mais tarde.



Revisão e reequilíbrio

Esta é uma indústria muito dinâmica. Essa tecnologia quente que você começou a investigar no mês passado pode estar frio agora. Talvez você precise aprimorar essa tecnologia de banco de dados que você não usa há algum tempo. Ou talvez você possa estar melhor posicionado para essa nova abertura de emprego se você experimentasse esse outro idioma….





De todas essas diretrizes, a mais importante é a mais simples de fazer:

Dica 9 Invista regularmente em seu portfólio de conhecimento





Metas


Agora que você tem algumas diretrizes sobre o que e quando adicionar ao seu portfólio de conhecimento, qual é a melhor maneira de adquirir capital intelectual para financiar seu portfólio? Aqui estão algumas sugestões:

Aprenda pelo menos um novo idioma todos os anos

Diferentes idiomas resolvem os mesmos problemas de maneiras diferentes. Ao aprender várias abordagens diferentes, você pode ajudar a ampliar seu pensamento e evitar ficar preso em uma rotina. Além disso, aprender muitos idiomas é fácil graças à riqueza de software disponível gratuitamente.



Leia um livro técnico todos os meses

Embora exista um excesso de ensaios de formato curto e respostas ocasionalmente confiáveis na web, para um entendimento profundo, você precisa de livros de forma longa. Navegue pelos livreiros para livros técnicos sobre tópicos interessantes relacionados ao seu projeto atual. [10] Quando estiver no hábito, leia um livro por mês. Depois de dominar as tecnologias que está usando, ramifique e estuda alguns que não se relacionam com o seu projeto.



Leia livros não técnicos também

É importante lembrar que os computadores são usados por pessoas - pessoas cujas necessidades você está tentando satisfazer. Você trabalha com pessoas, é empregado por pessoas e é invadido pelas pessoas. Não se esqueça do lado humano da equação, pois isso requer um conjunto de habilidades totalmente diferente (chamamos ironicamente essas habilidades sociais, mas elas são realmente muito difíceis de dominar).



Tire aulas

Procure cursos interessantes em uma faculdade ou universidade local ou on -line, ou talvez na próxima feira ou conferência próxima.



Participar de grupos de usuários locais e encontros

O isolamento pode ser mortal para sua carreira; Descubra o que as pessoas estão trabalhando fora da sua empresa. Não vá e ouça: participe ativamente.



Experimente ambientes diferentes

Se você trabalhou apenas no Windows, passe algum tempo com o Linux. Se você usou apenas makefiles e um editor, tente um IDE sofisticado com recursos de ponta e vice-versa.



Fique atual

Leia notícias e
Postagens on -line em tecnologia diferente da do seu projeto atual. É uma ótima maneira de descobrir quais experiências outras pessoas estão tendo com isso, o jargão em particular que eles usam e assim por diante.





É importante continuar investindo. Depois de se sentir confortável com um novo idioma ou um pouco de tecnologia, siga em frente. Aprenda outro.

Não importa se você usa alguma dessas tecnologias em um projeto, ou mesmo se você as coloca em seu currículo. O processo de aprendizado expandirá seu pensamento, abrindo -o para novas possibilidades e novas maneiras de fazer as coisas. A polinização cruzada de idéias é importante; Tente aplicar as lições que você aprendeu ao seu projeto atual. Mesmo que o seu projeto não use essa tecnologia, talvez você possa emprestar algumas idéias. Familiarize -se com a orientação do objeto, por exemplo, e você escreverá programas processuais de maneira diferente. Entenda o paradigma de programação funcional e você escreverá o código orientado a objetos de maneira diferente e assim por diante.





Oportunidades de aprendizado


Então, você está lendo vorazmente, está no topo dos últimos desenvolvimentos de quebra em seu campo (não é uma coisa fácil de fazer) e alguém faz uma pergunta. Você não tem a idéia mais fraca qual é a resposta e admite livremente.

Não deixe isso parar por aí. Tome como um desafio pessoal encontrar a resposta. Pergunte ao redor. Pesquise na Web - as partes acadêmicas também, não apenas as peças do consumidor.

Se você não conseguir encontrar a resposta, descubra quem pode. Não deixe descansar. Conversar com outras pessoas ajudará a construir sua rede pessoal e você poderá se surpreender encontrando soluções para outros problemas não relacionados ao longo do caminho. E esse antigo portfólio continua ficando maior….

Toda essa leitura e pesquisa leva tempo e o tempo já está em falta. Então você precisa planejar com antecedência. Sempre tenha algo para ler em um momento morto. O tempo gasto esperando por médicos e dentistas pode ser uma grande oportunidade de acompanhar sua leitura-mas não deixe de trazer seu próprio e-reader com você, ou você pode se encontrar com um artigo de 1973 com orelhas de cachorro sobre a Papua Nova Guiné.





Pensamento crítico


O último ponto importante é pensar criticamente sobre o que você lê e ouve. Você precisa garantir que o conhecimento em seu portfólio seja preciso e sem subsídio pelo hype do fornecedor ou da mídia. Cuidado com os fanáticos que insistem que seu dogma fornece a única resposta - pode ou não ser aplicável a você e ao seu projeto.

Nunca subestime o poder do comercialismo. Só porque um mecanismo de pesquisa na web lista um sucesso primeiro não significa que é a melhor correspondência; O provedor de conteúdo pode pagar para obter o faturamento superior. Só porque uma livraria apresenta um livro com destaque não significa que é um bom livro ou até popular; Eles podem ter sido pagos para colocá -lo lá.

Dica 10 Analise criticamente o que você lê e ouve



O pensamento crítico é uma disciplina inteira para si mesma, e incentivamos você a ler e estudar tudo o que puder sobre isso. Enquanto isso, aqui está uma vantagem com algumas perguntas para fazer e pensar.

Pergunte aos "cinco porquês"

Um truque de consultoria favorito: pergunte "Por quê?" pelo menos cinco vezes. Faça uma pergunta e obtenha uma resposta. Cavar mais fundo perguntando "Por quê?" Repita como se você tivesse uma petulante de quatro anos (mas educado). Você pode se aproximar de uma causa raiz dessa maneira.



Quem isso se beneficia?

Pode parecer cínico, mas siga o dinheiro pode ser um caminho muito útil para analisar. Os benefícios para outra pessoa ou outra organização podem estar alinhados com os seus ou não.



Qual é o contexto?

Tudo ocorre em seu próprio contexto, e é por isso que as soluções de "tamanho único" geralmente não. Considere um artigo ou livro divulgando uma "prática recomendada". Boas perguntas a serem consideradas são "melhores para quem?" Quais são os pré -requisitos, quais são as consequências, a curto e a longo prazo?



Quando ou onde isso funcionaria?

Em que circunstâncias? É tarde demais? Muito cedo? Não pare com o pensamento de primeira ordem (o que acontecerá a seguir), mas use o pensamento de segunda ordem: o que acontecerá depois disso?



Por que isso é um problema?

Existe um modelo subjacente? Como funciona o modelo subjacente?





Infelizmente, existem muito poucas respostas simples. Mas com seu extenso portfólio e, ao aplicar alguma análise crítica à torrente de artigos técnicos que você lerá, você pode entender as respostas complexas.





Seções relacionadas incluem


Tópico 1, é a sua vida

Tópico 22, Daybooks de engenharia





Desafios


Comece a aprender um novo idioma nesta semana. Sempre
programado na mesma língua antiga? Experimente Clojure, Elixir, Elm, F#, Go, Haskell, Python, R, RachoinML, Ruby, Rust, Scala, Swift, Typescript ou qualquer outra coisa que apela e/ou parece que você gosta. [11]



Comece a ler um novo livro (mas termine este primeiro!). Se você estiver fazendo implementação e codificação muito detalhadas, leia um livro sobre design e arquitetura. Se você estiver fazendo design de alto nível, leia um livro sobre técnicas de codificação.



Saia e converse tecnologia com pessoas que não estão envolvidas em seu projeto atual ou que não trabalham para a mesma empresa. Rede na cafeteria da sua empresa, ou talvez procure colegas entusiastas em um encontro local.





Tópico 7

Comunicar!




Eu acredito que é melhor ser visto do que para ser esquecido.



Mae West, Belle dos anos 90, 1934



Talvez possamos aprender uma lição da Sra. West. Não é apenas o que você tem, mas também como o empacote. Ter as melhores idéias, o melhor código ou o pensamento mais pragmático é, em última análise, estéril, a menos que você possa se comunicar com outras pessoas. Uma boa ideia é um órfão sem comunicação eficaz.

Como desenvolvedores, temos que nos comunicar em muitos níveis. Passamos horas em reuniões, ouvindo e conversando. Trabalhamos com usuários finais, tentando entender suas necessidades. Escrevemos o código, que comunica nossas intenções a uma máquina e documenta nosso pensamento para as gerações futuras de desenvolvedores. Escrevemos propostas e memorandos solicitando e justificando recursos, relatando nosso status e sugerindo novas abordagens. E trabalhamos diariamente em nossas equipes para defender nossas idéias, modificar as práticas existentes e sugerir novas. Grande parte do dia é gasta se comunicando, então precisamos fazê -lo bem.

Trate o inglês (ou qualquer que seja sua língua nativa) como apenas mais uma linguagem de programação. Escreva a linguagem natural como você escreveria código: honre o princípio seco, etc, automação e assim por diante. (Discutimos os princípios de design seco e etc no próximo capítulo.)

Dica 11 O inglês é apenas mais uma linguagem de programação



Reunimos uma lista de idéias adicionais que achamos úteis.





Conheça seu público


Você está se comunicando apenas se estiver transmitindo o que pretende transmitir - apenas conversar não é suficiente. Para fazer isso, você precisa entender as necessidades, interesses e capacidades do seu público. Todos nós sentamos em reuniões em que um geek de desenvolvimento de esmaltes sobre os olhos do vice -presidente de marketing com um longo monólogo sobre os méritos de alguma tecnologia misteriosa. Isso não está se comunicando: está apenas falando e é irritante. [12]

Digamos que você queira alterar seu sistema de monitoramento remoto para usar um corretor de mensagens de terceiros para disseminar notificações de status. Você pode apresentar esta atualização de muitas maneiras diferentes, dependendo do seu público. Os usuários finais apreciarão que seus sistemas agora possam interoperar com outros serviços que usam o corretor. Seu departamento de marketing poderá usar esse fato para aumentar as vendas. Os gerentes de desenvolvimento e operações ficarão felizes porque o cuidado e a manutenção dessa parte do sistema agora são o problema de outra pessoa. Por fim, os desenvolvedores podem gostar de ter experiência com novas APIs e podem até encontrar novos usos para o corretor de mensagens. Ao fazer o argumento apropriado para cada grupo, você os empolgará com o seu projeto.

Como em todas as formas de comunicação, o truque aqui é obter feedback. Não espere apenas perguntas: peça -as. Olhe para a linguagem corporal e expressões faciais. Um dos pressupostos neuro -linguísticos é "o significado da sua comunicação é a resposta que você recebe". Melhore continuamente seu conhecimento do seu público à medida que você se comunica.





Saiba o que você quer dizer


Provavelmente, a parte mais difícil dos estilos de comunicação mais formais usados nos negócios é descobrir exatamente o que você deseja dizer. Os escritores de ficção costumam traçar seus livros em detalhes antes de começarem, mas as pessoas que escrevem documentos técnicos geralmente ficam felizes em sentar em um teclado, digite:

Introdução





E comece a digitar o que quer que chegue em suas cabeças a seguir.

Planeje o que você quer dizer. Escreva um esboço. Então pergunte a si mesmo: "Isso comunica o que eu quero expressar ao meu público de uma maneira que funcione para eles?" Refine até que isso aconteça.

Essa abordagem funciona para mais do que apenas documentos. Quando você se depara com uma reunião importante ou um bate -papo com um grande cliente, anote as idéias que deseja se comunicar e planeje algumas estratégias para colocá -las.

Agora que você sabe o que você
O público quer, vamos entregá -lo.





Escolha seu momento


São seis horas na tarde de sexta -feira, após uma semana em que os auditores chegaram. O mais novo do seu chefe está no hospital, está chovendo lá fora, e a casa é garantida como um pesadelo. Provavelmente não é um bom momento para pedir a ela uma atualização de memória para o seu laptop.

Como parte do entendimento do que seu público precisa ouvir, você precisa descobrir quais são suas prioridades. Assista a um gerente que acabou de ter dificuldade em seu chefe porque algum código -fonte se perdeu e você terá um ouvinte mais receptivo para suas idéias sobre os repositórios do código -fonte. Faça o que você está dizendo relevante no tempo, bem como no conteúdo. Às vezes, basta a pergunta simples: "Este é um bom momento para falar ...?" "





Escolha um estilo


Ajuste o estilo da sua entrega para se adequar ao seu público. Algumas pessoas querem um briefing formal de "apenas os fatos". Outros gostam de um bate-papo longo e abrangente antes de chegar aos negócios. Qual é o seu nível de habilidade e experiência nessa área? São especialistas? Os novatos? Eles precisam de manutenção à mão ou apenas um rápido tl; dr? Se em dúvida, pergunte.

Lembre -se, no entanto, de que você é metade da transação de comunicação. Se alguém disser que precisa de um parágrafo descrevendo algo e você não pode ver nenhuma maneira de fazê -lo em menos de várias páginas, diga isso. Lembre -se, esse tipo de feedback também é uma forma de comunicação.





Faça parecer bom


Suas idéias são importantes. Eles merecem um veículo bonito para transmiti-los ao seu público.

Muitos desenvolvedores (e seus gerentes) concentram -se apenas no conteúdo ao produzir documentos escritos. Achamos que isso é um erro. Qualquer chef (ou observador da rede de alimentos) dirá que você pode escravar na cozinha por horas apenas para arruinar seus esforços com uma apresentação ruim.

Hoje, não há desculpa para produzir documentos impressos de aparência ruim. O software moderno pode produzir uma saída impressionante, independentemente de você estar escrevendo usando o Markdown ou usando um processador de texto. Você precisa aprender apenas alguns comandos básicos. Se você estiver usando um processador de texto, use suas folhas de estilo para consistência. (Sua empresa já pode ter folhas de estilo definidas que você pode usar.) Aprenda a definir cabeçalhos e rodapés da página. Veja os documentos de amostra incluídos no seu pacote para obter idéias sobre estilo e layout. Verifique a ortografia, primeiro automaticamente e depois manualmente. Depois de AWL, estão soletrando miss bifes para que o verificador possa dar um nó.





Envolva seu público


Muitas vezes descobrimos que os documentos que produzimos acabam sendo menos importantes do que o processo pelo qual passamos para produzi -los. Se possível, envolva seus leitores com rascunhos iniciais do seu documento. Obtenha o feedback deles e escolha o cérebro. Você criará um bom relacionamento de trabalho e provavelmente produzirá um documento melhor no processo.





Seja um ouvinte


Há uma técnica que você deve usar se quiser que as pessoas o ouçam: ouça -as. Mesmo que essa seja uma situação em que você tenha todas as informações, mesmo que seja uma reunião formal com você na frente de 20 ternos - se você não os ouve, eles não o ouvirão.

Incentive as pessoas a conversarem fazendo perguntas ou peça que reafirmem a discussão em suas próprias palavras. Transforme a reunião em uma caixa de diálogo e você fará seu ponto de maneira mais eficaz. Quem sabe, você pode até aprender algo.





Volte para as pessoas


Se você fizer uma pergunta a alguém, sente que eles são indelicados se eles não responderem. Mas com que frequência você deixa de voltar para as pessoas quando elas enviam um e -mail ou um memorando pedindo informações ou solicitando alguma ação? Na pressa da vida cotidiana, é fácil esquecer. Sempre responda a e -mails e correios de voz, mesmo que a resposta seja simplesmente "voltarei a você mais tarde".

Dica 12 É o que você diz e a maneira como você diz



A menos que você trabalhe no vácuo, você precisa se comunicar. Quanto mais eficaz essa comunicação, mais influente você se torna.





Documentação


Por fim, há a questão de se comunicar por meio de documentação. Normalmente, os desenvolvedores não pensam muito na documentação. Na melhor das hipóteses, é uma necessidade infeliz; Na pior das hipóteses, é tratado como uma tarefa de baixa prioridade, na esperança de que a administração o esqueça no final do projeto.

Os programadores pragmáticos adotam a documentação como parte integrante do desenvolvimento geral
processo. A documentação de escrever pode ser facilitada, sem duplicar o esforço ou perder tempo e manter a documentação em questão - no próprio código. De fato, queremos aplicar todos os nossos princípios pragmáticos à documentação e ao código.

Dica 13 Construa documentação, não o prenda



É fácil produzir documentação de boa aparência a partir dos comentários no código-fonte, e recomendamos adicionar comentários a módulos e funções exportadas para dar a outros desenvolvedores uma vantagem quando eles o usam.

No entanto, isso não significa que concordamos com as pessoas que dizem que todas as funções, estrutura de dados, declaração de tipo, etc., precisam de seu próprio comentário. Esse tipo de redação de comentários mecânicos realmente torna mais difícil manter o código: agora há duas coisas a serem atualizadas quando você faz uma alteração. Portanto, restrinja seu não-api comentando a discutir por que algo é feito, seu objetivo e seu objetivo. O código já mostra como é feito, então comentar sobre isso é redundante - e é uma violação do princípio seco.

Comentar o código-fonte oferece a oportunidade perfeita para documentar aqueles bits ilusórios de um projeto que não podem ser documentados em nenhum outro lugar: engenharia de compensações, por que as decisões foram tomadas, que outras alternativas foram descartadas e assim por diante.





Resumo


Saiba o que você quer dizer.

Conheça seu público.

Escolha seu momento.

Escolha um estilo.

Faça parecer bom.

Envolva seu público.

Seja um ouvinte.

Volte para as pessoas.

Mantenha o código e a documentação juntos.





Seções relacionadas incluem


Tópico 15, estimativa

Tópico 18, edição de energia

Tópico 45, o poço de requisitos

Tópico 49, equipes pragmáticas




Comunicação online

Tudo o que dissemos sobre a comunicação por escrito se aplica igualmente a email, postagens de mídia social, blogs e assim por diante. O email em particular evoluiu até o ponto em que é um dos pilares das comunicações corporativas; É usado para discutir contratos, liquidar disputas e como evidência no tribunal. Mas, por algum motivo, as pessoas que nunca enviariam um documento de papel surrado ficam felizes em arremessar e-mails incoerentes de aparência desagradável em todo o mundo.

Nossas dicas são simples:

Revise antes de acertar o envio.



Verifique sua ortografia e procure quaisquer contratempos acidentais de correção automática.



Mantenha o formato simples e claro.



Continue citando no mínimo. Ninguém gosta de receber de volta seu próprio e-mail de 100 linhas com "eu concordo".



Se você está citando o e -mail de outras pessoas, atribua -o e cite -o embutido (e não como um anexo). Mesmo ao citar em plataformas de mídia social.



Não chama ou aja como um troll, a menos que você queira que ele volte e assombre você mais tarde. Se você não disser isso no rosto de alguém, não diga online.



Verifique sua lista de destinatários antes de enviar. Tornou -se um clichê criticar o chefe por causa do email departamental sem perceber que o chefe está na lista do CC. Melhor ainda, não critique o chefe por e -mail.





Como inúmeras grandes corporações e políticos descobriram, o email e as postagens de mídia social são para sempre. Tente dar a mesma atenção e cuidado ao e -mail que faria com qualquer memorando ou relatório por escrito.





Desafios


Existem vários bons livros que contêm seções sobre comunicações dentro de equipes, incluindo o mítico-mês: ensaios sobre engenharia de software [BRO96] e Peopleware: Projetos e equipes produtivas [DL13]. Faça questão de tentar ler isso nos próximos 18 meses. Além disso, os cérebros de dinossauros: lidando com todas as pessoas impossíveis do trabalho [BR89] discute a bagagem emocional que todos trazemos para o ambiente de trabalho.



Na próxima vez que você precisar fazer uma apresentação ou escrever um memorando defendendo alguma posição, tente trabalhar com os conselhos nesta seção antes de iniciar. Identifique explicitamente o público e o que você precisa se comunicar. Se apropriado, converse com seu público depois e veja a precisão da sua avaliação de suas necessidades.





Notas de rodapé


[3]

http://wiki.c2.com/?changeyourororganization



[4]

Veja, por exemplo, uma boa metanálise no desempenho da confiança e da equipe: uma meta-análise de efeitos principais, moderadores e covariáveis, http://dx.doi.org/10.1037/APL0000110



[5]

Veja a segurança da polícia e do bairro [WH82]



[6]

Veja depressão contagiosa: existência, especificidade aos sintomas deprimidos e o papel da busca por garantia [JOI94]



[7]

Enquanto faz isso, você pode ser consolado pela linha atribuída ao almirante retrovisor Dr. Grace Hopper: "É mais fácil perguntar perdão do que obter permissão".



[8]

Isso deveria ser
Uma piada!



[9]

Um ativo vencido é algo cujo valor diminui com o tempo. Os exemplos incluem um armazém cheio de bananas e um ingresso para um jogo de bola.



[10]

Podemos ser tendenciosos, mas há uma boa seleção disponível em https://pragprog.com.



[11]

Nunca ouviu falar de nenhum desses idiomas? Lembre -se de que o conhecimento é um ativo expirador, assim como a tecnologia popular. A lista de idiomas novos e experimentais quentes foi muito diferente para a primeira edição e provavelmente é diferente novamente quando você ler isso. Mais uma razão para continuar aprendendo.



[12]

A palavra irritação vem do antigo enui francês, que também significa "para aborrecer".





Copyright © 2020 Pearson Education, Inc.